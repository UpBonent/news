// Code generated by MockGen. DO NOT EDIT.
// Source: rest.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockAuthorHandler is a mock of AuthorHandler interface.
type MockAuthorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorHandlerMockRecorder
}

// MockAuthorHandlerMockRecorder is the mock recorder for MockAuthorHandler.
type MockAuthorHandlerMockRecorder struct {
	mock *MockAuthorHandler
}

// NewMockAuthorHandler creates a new mock instance.
func NewMockAuthorHandler(ctrl *gomock.Controller) *MockAuthorHandler {
	mock := &MockAuthorHandler{ctrl: ctrl}
	mock.recorder = &MockAuthorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorHandler) EXPECT() *MockAuthorHandlerMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockAuthorHandler) All(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockAuthorHandlerMockRecorder) All(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAuthorHandler)(nil).All), c)
}

// Create mocks base method.
func (m *MockAuthorHandler) Create(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuthorHandlerMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorHandler)(nil).Create), c)
}

// Delete mocks base method.
func (m *MockAuthorHandler) Delete(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthorHandlerMockRecorder) Delete(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthorHandler)(nil).Delete), c)
}

// Register mocks base method.
func (m *MockAuthorHandler) Register(c *echo.Echo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", c)
}

// Register indicates an expected call of Register.
func (mr *MockAuthorHandlerMockRecorder) Register(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthorHandler)(nil).Register), c)
}

// MockArticleHandler is a mock of ArticleHandler interface.
type MockArticleHandler struct {
	ctrl     *gomock.Controller
	recorder *MockArticleHandlerMockRecorder
}

// MockArticleHandlerMockRecorder is the mock recorder for MockArticleHandler.
type MockArticleHandlerMockRecorder struct {
	mock *MockArticleHandler
}

// NewMockArticleHandler creates a new mock instance.
func NewMockArticleHandler(ctrl *gomock.Controller) *MockArticleHandler {
	mock := &MockArticleHandler{ctrl: ctrl}
	mock.recorder = &MockArticleHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleHandler) EXPECT() *MockArticleHandlerMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockArticleHandler) All(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockArticleHandlerMockRecorder) All(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockArticleHandler)(nil).All), c)
}

// Create mocks base method.
func (m *MockArticleHandler) Create(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArticleHandlerMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleHandler)(nil).Create), c)
}

// Delete mocks base method.
func (m *MockArticleHandler) Delete(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleHandlerMockRecorder) Delete(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleHandler)(nil).Delete), c)
}

// Register mocks base method.
func (m *MockArticleHandler) Register(c *echo.Echo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", c)
}

// Register indicates an expected call of Register.
func (mr *MockArticleHandlerMockRecorder) Register(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockArticleHandler)(nil).Register), c)
}

// Update mocks base method.
func (m *MockArticleHandler) Update(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleHandlerMockRecorder) Update(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleHandler)(nil).Update), c)
}

// MockHomePageHandler is a mock of HomePageHandler interface.
type MockHomePageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHomePageHandlerMockRecorder
}

// MockHomePageHandlerMockRecorder is the mock recorder for MockHomePageHandler.
type MockHomePageHandlerMockRecorder struct {
	mock *MockHomePageHandler
}

// NewMockHomePageHandler creates a new mock instance.
func NewMockHomePageHandler(ctrl *gomock.Controller) *MockHomePageHandler {
	mock := &MockHomePageHandler{ctrl: ctrl}
	mock.recorder = &MockHomePageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHomePageHandler) EXPECT() *MockHomePageHandlerMockRecorder {
	return m.recorder
}

// HomePage mocks base method.
func (m *MockHomePageHandler) HomePage(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HomePage", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// HomePage indicates an expected call of HomePage.
func (mr *MockHomePageHandlerMockRecorder) HomePage(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HomePage", reflect.TypeOf((*MockHomePageHandler)(nil).HomePage), c)
}

// Register mocks base method.
func (m *MockHomePageHandler) Register(c *echo.Echo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", c)
}

// Register indicates an expected call of Register.
func (mr *MockHomePageHandlerMockRecorder) Register(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHomePageHandler)(nil).Register), c)
}
